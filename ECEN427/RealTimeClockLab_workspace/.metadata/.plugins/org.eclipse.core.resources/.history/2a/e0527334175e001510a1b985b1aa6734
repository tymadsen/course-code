#include "xgpio.h"          // Provides access to PB GPIO driver.
#include <stdio.h>          // xil_printf and so forth.
#include "platform.h"       // Enables caching and other system stuff.
#include "mb_interface.h"   // provides the microblaze interrupt enables, etc.
#include "xintc_l.h"        // Provides handy macros for the interrupt controller.
 
XGpio gpLED;  // This is a handle for the LED GPIO block.
XGpio gpPB;   // This is a handle for the push-button GPIO block.
int currentButtonState, debouncedButtonState;
int fitCounter = 0;
int btnCounter = 0;
int seconds = 0;
int minutes = 0;
int hours = 0;

// This takes in two button states and evaluates if they are debounced
void debounce_buttons(){
	debouncedButtonState = currentButtonState & 0x0000001F;
}
void inc_hours(){
	hours++;
	if(hours == 24){
		hours = 0;
	}
}

void inc_mins(){
	minutes++;
	if(minutes == 60){
		minutes = 0;
		inc_hours();
	}
}

void inc_secs(){
	seconds++;
	if(seconds == 60){
		seconds = 0;
		inc_mins();
	}
}

void inc_clock(){
	if(debouncedButtonState & 0x1) {
		print("Btn 1 was pressed                       ");//middle (mins)
	}
	if(debouncedButtonState & 0x2) {
		print("Btn 2 was pressed                       ");//right (secs)
	}
	if(debouncedButtonState & 0x4) {
		print("Btn 3 was pressed                       ");//down
	}
	if(debouncedButtonState & 0x8) {
		print("Btn 4 was pressed                       ");//left (hours)
	}
	if(debouncedButtonState & 0x10) {
		print("Btn 5 was pressed                       ");//up
	}
}
 
// This is invoked in response to a timer interrupt.
// It does 2 things: 1) debounce switches, and 2) advances the time.
void timer_interrupt_handler() {
	fitCounter++;

	if(fitCounter >= 100){
		inc_secs();
		print("\r");
		fitCounter = 0;
	}
	if(btnCounter == 10){
		//update time
		debounce_buttons();
		//mask for button 1
		if(debouncedButtonState > 0){
			inc_clock();
		}
	}
//	if(btnCounter == 0) {
//		oldButtonState = currentButtonState;
//	}
	btnCounter++;
}
 
// This is invoked each time there is a change in the button state (result of a push or a bounce).
void pb_interrupt_handler() {
  // Clear the GPIO interrupt.
  XGpio_InterruptGlobalDisable(&gpPB);                // Turn off all PB interrupts for now.
  currentButtonState = XGpio_DiscreteRead(&gpPB, 1);  // Get the current state of the buttons.
  // You need to do something here.
  btnCounter = 0;//print("#");
  //todo:
  //Reset button counter
  //

  XGpio_InterruptClear(&gpPB, 0xFFFFFFFF);            // Ack the PB interrupt.
  XGpio_InterruptGlobalEnable(&gpPB);                 // Re-enable PB interrupts.
}
 
// Main interrupt handler, queries the interrupt controller to see what peripheral
// fired the interrupt and then dispatches the corresponding interrupt handler.
// This routine acks the interrupt at the controller level but the peripheral
// interrupt must be ack'd by the dispatched interrupt handler.
void interrupt_handler_dispatcher(void* ptr) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the FIT interrupt first.
	if (intc_status & XPAR_FIT_TIMER_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_FIT_TIMER_0_INTERRUPT_MASK);
		timer_interrupt_handler();
	}
	// Check the push buttons.
	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
		pb_interrupt_handler();
	}
}
 
int main (void) {
    init_platform();
    // Initialize the GPIO peripherals.
    int success;
    print("hello world\n\r");
    success = XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);
    // Set the push button peripheral to be inputs.
    XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
    // Enable the global GPIO interrupt for push buttons.
    XGpio_InterruptGlobalEnable(&gpPB);
    // Enable all interrupts in the push button peripheral.
    XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);

    //Enable interrupts from the FIT
//    XTime_FITEnableInterrupt();

    microblaze_register_handler(interrupt_handler_dispatcher, NULL);
    XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,
    		(XPAR_FIT_TIMER_0_INTERRUPT_MASK | XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK));
    XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
    microblaze_enable_interrupts();
 
    while(1);  // Program never ends.
 
    cleanup_platform();
 
    return 0;
}
