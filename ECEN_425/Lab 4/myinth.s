; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
tickCount:
	DW	0
	ALIGN	2
resetHandler:
	; >>>>> Line:	10
	; >>>>> ay = 0; 
	jmp	L_myinth_1
L_myinth_2:
	; >>>>> Line:	11
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_1:
	push	bp
	mov	bp, sp
	jmp	L_myinth_2
L_myinth_4:
	DB	"TICK ",0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	14
	; >>>>> void YKTickHandler(void){ 
	jmp	L_myinth_5
L_myinth_6:
	; >>>>> Line:	17
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	18
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	19
	; >>>>> printString("TICK "); 
	mov	ax, L_myinth_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	20
	; >>>>> printUInt(YKTickNum); 
	push	word [YKTickNum]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	21
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	23
	; >>>>> tmp = YKTaskList; 
	mov	ax, word [YKTaskList]
	mov	word [bp-2], ax
	; >>>>> Line:	24
	; >>>>> while(tmp->next != 0){ 
	jmp	L_myinth_8
L_myinth_7:
	; >>>>> Line:	25
	; >>>>> tmp->delay--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	26
	; >>>>> if(tmp->state == 2 && tmp->delay == 0){ 
	mov	si, word [bp-2]
	add	si, 2
	cmp	word [si], 2
	jne	L_myinth_10
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_myinth_10
	; >>>>> Line:	27
	; >>>>> tmp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
L_myinth_10:
	; >>>>> Line:	29
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_myinth_8:
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_myinth_7
L_myinth_9:
	mov	sp, bp
	pop	bp
	ret
L_myinth_5:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_6
L_myinth_15:
	DB	"DELAY COMPLETE",0
L_myinth_14:
	DB	"DELAY KEY PRESSED",0
L_myinth_13:
	DB	") IGNORED",0
L_myinth_12:
	DB	"KEYPRESS (",0
	ALIGN	2
keyHandler:
	; >>>>> Line:	36
	; >>>>> void keyHandler(){ 
	jmp	L_myinth_16
L_myinth_17:
	; >>>>> Line:	37
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	38
	; >>>>> if (KeyBuffer != 'd'){ 
	cmp	word [KeyBuffer], 100
	je	L_myinth_18
	; >>>>> Line:	39
	; >>>>> printString("KEYPRESS ("); 
	mov	ax, L_myinth_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	40
	; >>>>> printChar(KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	41
	; >>>>> printString(") IGNORED"); 
	mov	ax, L_myinth_13
	push	ax
	call	printString
	add	sp, 2
	jmp	L_myinth_19
L_myinth_18:
	; >>>>> Line:	43
	; >>>>> printString("DELAY KEY PRESSED"); 
	mov	ax, L_myinth_14
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	44
	; >>>>> delay = 0; 
	mov	word [delay], 0
	; >>>>> Line:	45
	; >>>>> while 
	jmp	L_myinth_21
L_myinth_20:
	; >>>>> Line:	46
	; >>>>> delay++; 
	inc	word [delay]
L_myinth_21:
	cmp	word [delay], 5000
	jb	L_myinth_20
L_myinth_22:
	; >>>>> Line:	47
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	48
	; >>>>> printString("DELAY COMPLETE"); 
	mov	ax, L_myinth_15
	push	ax
	call	printString
	add	sp, 2
L_myinth_19:
	; >>>>> Line:	50
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_myinth_16:
	push	bp
	mov	bp, sp
	jmp	L_myinth_17
	ALIGN	2
delay:
	TIMES	2 db 0
